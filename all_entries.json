[
  {
    "id": "fa08f526-ad4a-250c-7922-bb0cdb97b1de",
    "question": "What is the difference between a list and a tuple in Python?",
    "answer": "Lists are mutable, meaning their elements can be changed, while tuples are immutable. Lists use square brackets `[]` and tuples use parentheses `()`.",
    "content": "Q: What is the difference between a list and a tuple in Python? A: Lists are mutable, meaning their elements can be changed, while tuples are immutable. Lists use square brackets `[]` and tuples use parentheses `()`.",
    "source": "general_python.json"
  },
  {
    "id": "7fc185e3-5ab7-948c-b06b-3e37f9841231",
    "question": "What are Python decorators?",
    "answer": "Decorators are a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. They are often used for logging, timing, and access control.",
    "content": "Q: What are Python decorators? A: Decorators are a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. They are often used for logging, timing, and access control.",
    "source": "general_python.json"
  },
  {
    "id": "2d9d7688-0ed6-b762-0fa6-d0cf097b75af",
    "question": "How does Python's Global Interpreter Lock (GIL) work?",
    "answer": "The GIL is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecode at the same time. This means that even on a multi-core processor, only one thread can execute Python code at once.",
    "content": "Q: How does Python's Global Interpreter Lock (GIL) work? A: The GIL is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecode at the same time. This means that even on a multi-core processor, only one thread can execute Python code at once.",
    "source": "general_python.json"
  },
  {
    "id": "9b53bb6b-5865-edda-b209-cb6fe520cd29",
    "question": "What is the difference between `==` and `is` in Python?",
    "answer": "`==` checks for equality of value (do two objects have the same content?), while `is` checks for identity (do two variables point to the same object in memory?).",
    "content": "Q: What is the difference between `==` and `is` in Python? A: `==` checks for equality of value (do two objects have the same content?), while `is` checks for identity (do two variables point to the same object in memory?).",
    "source": "general_python.json"
  },
  {
    "id": "bb1b2b92-c428-d2ab-e601-3ab75410dd87",
    "question": "Explain list comprehensions and their benefits.",
    "answer": "List comprehensions provide a concise way to create lists. They are often more readable and faster than using traditional `for` loops and `.append()` calls.",
    "content": "Q: Explain list comprehensions and their benefits. A: List comprehensions provide a concise way to create lists. They are often more readable and faster than using traditional `for` loops and `.append()` calls.",
    "source": "general_python.json"
  },
  {
    "id": "381826d8-0b8c-7da9-a5f2-623afe0e7df7",
    "question": "What is `*args` and `**kwargs` in function definitions?",
    "answer": "`*args` allows you to pass a variable number of non-keyword arguments to a function, which are received as a tuple. `**kwargs` allows you to pass a variable number of keyword arguments, received as a dictionary.",
    "content": "Q: What is `*args` and `**kwargs` in function definitions? A: `*args` allows you to pass a variable number of non-keyword arguments to a function, which are received as a tuple. `**kwargs` allows you to pass a variable number of keyword arguments, received as a dictionary.",
    "source": "general_python.json"
  },
  {
    "id": "edae61e9-b711-08b7-cf28-3089702e9a6f",
    "question": "What are Python's magic methods (e.g., `__init__`, `__str__`)?",
    "answer": "Magic methods, or dunder methods, are special methods that you can define to add \"magic\" to your classes. They are invoked by Python for built-in operations, like `__init__` for object creation or `__add__` for the `+` operator.",
    "content": "Q: What are Python's magic methods (e.g., `__init__`, `__str__`)? A: Magic methods, or dunder methods, are special methods that you can define to add \"magic\" to your classes. They are invoked by Python for built-in operations, like `__init__` for object creation or `__add__` for the `+` operator.",
    "source": "general_python.json"
  },
  {
    "id": "2bfb7af4-711b-ba3d-4ce2-a6cf4adaf7aa",
    "question": "How does error handling work in Python?",
    "answer": "Python uses `try...except` blocks to handle exceptions. Code that might raise an error is placed in the `try` block, and the code to handle the exception is placed in the `except` block.",
    "content": "Q: How does error handling work in Python? A: Python uses `try...except` blocks to handle exceptions. Code that might raise an error is placed in the `try` block, and the code to handle the exception is placed in the `except` block.",
    "source": "general_python.json"
  },
  {
    "id": "5cefcd43-d95d-66b6-1228-50ddf57ef14e",
    "question": "What is the purpose of the `if __name__ == \"__main__\":` block?",
    "answer": "This block ensures that the code inside it only runs when the script is executed directly, not when it is imported as a module into another script.",
    "content": "Q: What is the purpose of the `if __name__ == \"__main__\":` block? A: This block ensures that the code inside it only runs when the script is executed directly, not when it is imported as a module into another script.",
    "source": "general_python.json"
  },
  {
    "id": "b6a90727-acc9-cef9-7fb5-2de2691e8cd0",
    "question": "What are generators in Python??",
    "answer": "Generators are a simple way to create iterators. They are functions that use the `yield` keyword to return a sequence of values one at a time, saving memory for large datasets.",
    "content": "Q: What are generators in Python?? A: Generators are a simple way to create iterators. They are functions that use the `yield` keyword to return a sequence of values one at a time, saving memory for large datasets.",
    "source": "general_python.json"
  },
  {
    "id": "2cf41619-c0e3-86f0-a944-cbff002a049e",
    "question": "How do you create a variable in Python?",
    "answer": "In Python, variables are created by assignment, e.g., x = 10. No keyword is required.",
    "content": "Q: How do you create a variable in Python? A: In Python, variables are created by assignment, e.g., x = 10. No keyword is required.",
    "source": "syntax_basic.json"
  },
  {
    "id": "e940f14c-6dfc-98b7-52d1-fa4c831ca31f",
    "question": "How do you write comments in Python?",
    "answer": "Single-line comments use the # symbol. Multi-line comments can be done with triple quotes (''' or \"\"\").",
    "content": "Q: How do you write comments in Python? A: Single-line comments use the # symbol. Multi-line comments can be done with triple quotes (''' or \"\"\").",
    "source": "syntax_basic.json"
  },
  {
    "id": "a3a44e30-bbdc-5471-ad72-4bb87dcba8f6",
    "question": "",
    "answer": "",
    "content": "Python Data Types Overview 1. Numbers - Integers: whole numbers, e.g., 42 - Floats: decimal numbers, e.g., 3.14 - Complex: numbers with real and imaginary parts, e.g., 2 + 3j 2. Strings - Defined with single or double quotes: \"hello\", 'world' - Multiline strings use triple quotes: '''long text''' 3. Booleans - True or False values - Often used in conditions and logical operations",
    "source": "syntax_datatypes.txt#part0"
  },
  {
    "id": "4a951391-1bc5-345c-32ae-5f8c6ad34d31",
    "question": "",
    "answer": "",
    "content": "4. None - Represents the absence of a value - Example: ```python x = None ``` 5. Type Checking - Use the `type()` function to check a variableâ€™s data type: ```python type(42) # <class 'int'> type(\"hi\") # <class 'str'> type(True) # <class 'bool'> ```",
    "source": "syntax_datatypes.txt#part1"
  },
  {
    "id": "bbbbd435-e1a8-d875-6e86-5b1da6d1cea8",
    "question": "How do you define a function in Python?",
    "answer": "Use the `def` keyword followed by the function name and parentheses. Example: ```python def greet(name):\n    return f\"Hello, {name}\"\n```\n",
    "content": "Q: How do you define a function in Python? A: Use the `def` keyword followed by the function name and parentheses. Example: ```python def greet(name): return f\"Hello, {name}\" ```",
    "source": "syntax_functions.yaml"
  },
  {
    "id": "4b4e73e4-f9f8-4888-a9c8-f7265249068b",
    "question": "What are default arguments in Python functions?",
    "answer": "Default arguments let you set a parameter value if none is provided. Example: ```python def power(base, exp=2):\n    return base ** exp\n```\n",
    "content": "Q: What are default arguments in Python functions? A: Default arguments let you set a parameter value if none is provided. Example: ```python def power(base, exp=2): return base ** exp ```",
    "source": "syntax_functions.yaml"
  },
  {
    "id": "5eb01a0e-7a89-58c2-787f-d197cf67de93",
    "question": "",
    "answer": "",
    "content": "# Python Loops Syntax ## For Loops The `for` loop is used to iterate over sequences (lists, tuples, strings). ``` for item in [1, 2, 3]: print(item) ``` ## For While Loops The `while` loop continues as long as a specified condition is true. ``` n = 0 while n < 5: print(n) n += 1 ``` ## Nested Loops You can use loops inside other loops. ``` for i in range(3): for j in range(2): print(i, j) ```",
    "source": "syntax_loops.md#part0"
  },
  {
    "id": "387addb4-1602-1c12-f35d-34b36917642e",
    "question": "",
    "answer": "",
    "content": "## Loop Control Statements - `break`: Exits the loop. - `continue`: Skips the current iteration and moves to the next. ``` for i in range(5): if i == 3: break print(i) ```",
    "source": "syntax_loops.md#part1"
  },
  {
    "id": "3fd23ce7-64a9-662c-5b35-da9491ddaa13",
    "question": "",
    "answer": "",
    "content": "Lists: Example:[1, 2, 3, 4] Description:Lists are ordered, mutable collections.",
    "source": "systax_collections.csv"
  },
  {
    "id": "387bbe5e-8c84-b659-ec2e-a99a61406873",
    "question": "",
    "answer": "",
    "content": "Tuples: Example:(1, 2, 3) Description:Tuples are ordered, immutable collections.",
    "source": "systax_collections.csv"
  },
  {
    "id": "710ab8d2-5442-25e4-ec98-0329e1e936c5",
    "question": "",
    "answer": "",
    "content": "Sets: Example:{1, 2, 3} Description:Sets are unordered collections of unique items.",
    "source": "systax_collections.csv"
  },
  {
    "id": "1014d8cc-b896-6704-f3f0-03a3900ea6c8",
    "question": "",
    "answer": "",
    "content": "Dicts: Example:{'a': 1, 'b': 2} Description:Dictionaries store key-value pairs.",
    "source": "systax_collections.csv"
  }
]