[
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "answer": "Lists are mutable, meaning their elements can be changed, while tuples are immutable. Lists use square brackets `[]` and tuples use parentheses `()`."
  },
  {
    "question": "What are Python decorators?",
    "answer": "Decorators are a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. They are often used for logging, timing, and access control."
  },
  {
    "question": "How does Python's Global Interpreter Lock (GIL) work?",
    "answer": "The GIL is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecode at the same time. This means that even on a multi-core processor, only one thread can execute Python code at once."
  },
  {
    "question": "What is the difference between `==` and `is` in Python?",
    "answer": "`==` checks for equality of value (do two objects have the same content?), while `is` checks for identity (do two variables point to the same object in memory?)."
  },
  {
    "question": "Explain list comprehensions and their benefits.",
    "answer": "List comprehensions provide a concise way to create lists. They are often more readable and faster than using traditional `for` loops and `.append()` calls."
  },
  {
    "question": "What is `*args` and `**kwargs` in function definitions?",
    "answer": "`*args` allows you to pass a variable number of non-keyword arguments to a function, which are received as a tuple. `**kwargs` allows you to pass a variable number of keyword arguments, received as a dictionary."
  },
  {
    "question": "What are Python's magic methods (e.g., `__init__`, `__str__`)?",
    "answer": "Magic methods, or dunder methods, are special methods that you can define to add \"magic\" to your classes. They are invoked by Python for built-in operations, like `__init__` for object creation or `__add__` for the `+` operator."
  },
  {
    "question": "How does error handling work in Python?",
    "answer": "Python uses `try...except` blocks to handle exceptions. Code that might raise an error is placed in the `try` block, and the code to handle the exception is placed in the `except` block."
  },
  {
    "question": "What is the purpose of the `if __name__ == \"__main__\":` block?",
    "answer": "This block ensures that the code inside it only runs when the script is executed directly, not when it is imported as a module into another script."
  },
  {
    "question": "What are generators in Python?",
    "answer": "Generators are a simple way to create iterators. They are functions that use the `yield` keyword to return a sequence of values one at a time, saving memory for large datasets."
  }
]

